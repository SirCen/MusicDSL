-sequenceDone
---
seq(__done, _C), _sig -> _C, _sig

-sequence 
_C1, _sig -> _C1P, _sigP
---
seq(_C1, _C2), _sig -> seq(_C1P, _C2), _sigP

-ifTrue 
---
if(True, _C1, _C2),_sig -> _C1, _sig

-ifFalse 
---
if(False, _C1, _C2),_sig -> _C2,_sig

-ifResolve
_E, _sig ->_EP, _sigP
---
if(_E,_C1,_C2),_sig -> if(_EP, _C1, _C2), _sigP

-while
---
while(_E, _C),_sig -> if(_E, seq(_C, while(_E,_C)), __done), _sig

-assign
_n |> __int32(_)   
---
assign(_X, _n), _sig -> __done, __put(_sig, _X, _n)

-assignResolve
_E, _sig -> _I, _sigP 
---
assign(_X,_E), _sig -> assign(_X, _I), _sigP

-gt
_n1 |> __int32(_) _n2 |> __int32(_)
---
gt(_n1, _n2),_sig ->  __gt(_n1, _n2),_sig 

-gtRight
_n |> __int32(_) _E2, _sig -> _I2,_sigP 
---
gt(_n, _E2),_sig -> gt(_n, _I2), _sigP

-gtLeft
_E1, _sig -> _I1, _sigP 
---
gt(_E1, _E2),_sig -> gt(_I1, _E2), _sigP

-ne
_n1 |> __int32(_) _n2 |> __int32(_)
---
ne(_n1, _n2),_sig ->  __ne(_n1, _n2),_sig

-neRight
_n |> __int32(_)  _E2, _sig -> _I2,_sigP 
---
ne(_n, _E2),_sig -> ne(_n, _I2), _sigP

-neLeft
_E1, _sig -> _I1, _sigP 
---
ne(_E1, _E2),_sig -> ne(_I1, _E2), _sigP

-sub
_n1 |> __int32(_) _n2 |> __int32(_)
---
sub(_n1, _n2),_sig ->  __sub(_n1, _n2),_sig

-subRight
_n |> __int32(_) _E2,_sig -> _I2,_sigP   
---
sub(_n, _E2),_sig -> sub(_n, _I2), _sigP

-subLeft
_E1,_sig -> _I1,_sigP
---
sub(_E1, _E2),_sig -> sub(_I1, _E2), _sigP

-variable
__get(_sig, _R) |> _Z
---
deref(_R),_sig -> _Z, _sig


-add
_n1 |> __int32(_) _n2 |> __int32(_)
---
add(_n1, _n2),_sig ->  __add(_n1, _n2),_sig

-addRight
_n |> __int32(_) _E2,_sig -> _I2,_sigP   
---
add(_n, _E2),_sig -> add(_n, _I2), _sigP

-addLeft
_E1,_sig -> _I1,_sigP
---
add(_E1, _E2),_sig -> add(_I1, _E2), _sigP

-mul
_n1 |> __int32(_) _n2 |> __int32(_)
---
mul(_n1, _n2),_sig ->  __mul(_n1, _n2),_sig

-mulRight
_n |> __int32(_) _E2,_sig -> _I2,_sigP   
---
mul(_n, _E2),_sig -> mul(_n, _I2), _sigP

-mulLeft
_E1,_sig -> _I1,_sigP
---
mul(_E1, _E2),_sig -> mul(_I1, _E2), _sigP

-div
_n1 |> __int32(_) _n2 |> __int32(_)
---
div(_n1, _n2),_sig ->  __div(_n1, _n2),_sig

-divRight
_n |> __int32(_) _E2,_sig -> _I2,_sigP   
---
div(_n, _E2),_sig -> div(_n, _I2), _sigP

-divLeft
_E1,_sig -> _I1,_sigP
---
div(_E1, _E2),_sig -> div(_I1, _E2), _sigP

-mod
_n1 |> __int32(_) _n2 |> __int32(_)
---
mod(_n1, _n2),_sig ->  __mod(_n1, _n2),_sig

-modRight
_n |> __int32(_) _E2,_sig -> _I2,_sigP   
---
mod(_n, _E2),_sig -> mod(_n, _I2), _sigP

-modLeft
_E1,_sig -> _I1,_sigP
---
mod(_E1, _E2),_sig -> mod(_I1, _E2), _sigP

-lt
_n1 |> __int32(_) _n2 |> __int32(_)
---
lt(_n1, _n2),_sig ->  __lt(_n1, _n2),_sig 

-ltRight
_n |> __int32(_) _E2, _sig -> _I2,_sigP 
---
lt(_n, _E2),_sig -> lt(_n, _I2), _sigP

-ltLeft
_E1, _sig -> _I1, _sigP 
---
lt(_E1, _E2),_sig -> lt(_I1, _E2), _sigP

-eq
_n1 |> __int32(_) _n2 |> __int32(_)
---
eq(_n1, _n2),_sig ->  __eq(_n1, _n2),_sig 

-eqRight
_n |> __int32(_) _E2, _sig -> _I2,_sigP 
---
eq(_n, _E2),_sig -> eq(_n, _I2), _sigP

-eqLeft
_E1, _sig -> _I1, _sigP 
---
eq(_E1, _E2),_sig -> eq(_I1, _E2), _sigP

-ge
_n1 |> __int32(_) _n2 |> __int32(_)
---
ge(_n1, _n2),_sig ->  __ge(_n1, _n2),_sig 

-geRight
_n |> __int32(_) _E2, _sig -> _I2,_sigP 
---
ge(_n, _E2),_sig -> ge(_n, _I2), _sigP

-geLeft
_E1, _sig -> _I1, _sigP 
---
ge(_E1, _E2),_sig -> ge(_I1, _E2), _sigP

-le
_n1 |> __int32(_) _n2 |> __int32(_)
---
le(_n1, _n2),_sig ->  __le(_n1, _n2),_sig 

-leRight
_n |> __int32(_) _E2, _sig -> _I2,_sigP 
---
le(_n, _E2),_sig -> le(_n, _I2), _sigP

-leLeft
_E1, _sig -> _I1, _sigP 
---
le(_E1, _E2),_sig -> le(_I1, _E2), _sigP

-play
_opCode |> __int32(_) _n1 |> __string(_)
---
play(_opCode, _n1),_sig -> __user(_opCode, _n1)

-repeatNote
_opCode |> __int32(_) _n1 |> __string(_) _n2 |> __int32(_)
---
repeatNote(_opCode, _n1, _n2),_sig -> __user(_opCode, _n1, _n2)

-setBpm
_opCode |> __int32(_) _n1 |> __int32(_)
---
setBpm(_opCode, _n1),_sig -> __user(_opCode, _n1)

-setInstrument
_opCode |> __int32(_) _n1 |> __int32(_)
---
setInstrument(_opCode, _n1),_sig -> __user(_opCode, _n1)

-setInstrument
_opCode |> __int32(_) _n1 |> __string(_)
---
setInstrument(_opCode, _n1),_sig -> __user(_opCode, _n1)

-mix
_opCode |> __int32(_) _n1 |> __array(_) _n2 |> __array(_)
---
mix(_opCode, _n1, _n2),_sig -> __user(_opCode, _n1, _n2)

-setVolume
_opCode |> __int32(_) _n1 |> __int32(_)
---
setVolume(_opCode, _n1),_sig -> __user(_opCode, _n1)

-scale
_opCode |> __int32(_) _n1 |> __string(_) _n2 |> __string(_)
---
scale(_opCode, _n1, _n2),_sig -> __user(_opCode, _n1, _n2)

-arpeggio
_opCode |> __int32(_) _n1 |> __string(_) _n2 |> __string(_)
---
arpeggio(_opCode, _n1, _n2),_sig -> __user(_opCode, _n1, _n2)

-octave
_opCode |> __int32(_) _n1 |> __int32(_)
---
octave(_opCode, _n1),_sig -> __user(_opCode, _n1)

-beatRatio
_opCode |> __int32(_) _n1 |> __real64(_)
---
beatRatio(_opCode, _n1),_sig -> __user(_opCode, _n1)

